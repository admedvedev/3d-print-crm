// –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
import { createClient } from '@supabase/supabase-js'

export async function debugSupabaseConnection() {
  console.log('üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê SUPABASE')
  console.log('=====================================')
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  console.log('üìã –í–°–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø:')
  const allEnvVars = {}
  Object.keys(import.meta.env).forEach(key => {
    allEnvVars[key] = import.meta.env[key]
  })
  
  console.table(allEnvVars)
  
  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Supabase (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç VITE_ –¥–ª—è Vite –ø—Ä–æ–µ–∫—Ç–æ–≤)
  const supabaseUrl = import.meta.env.VITE_SUPABASE_URL || import.meta.env.NEXT_PUBLIC_SUPABASE_URL
  const supabaseKey = import.meta.env.VITE_SUPABASE_ANON_KEY || import.meta.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
  
  console.log('üîó –ü–ï–†–ï–ú–ï–ù–ù–´–ï SUPABASE:')
  console.log('NEXT_PUBLIC_SUPABASE_URL:', supabaseUrl)
  console.log('NEXT_PUBLIC_SUPABASE_ANON_KEY:', supabaseKey ? `${supabaseKey.substring(0, 20)}...` : 'NOT SET')
  console.log('VITE_SUPABASE_URL:', import.meta.env.VITE_SUPABASE_URL)
  console.log('VITE_SUPABASE_ANON_KEY:', import.meta.env.VITE_SUPABASE_ANON_KEY ? `${import.meta.env.VITE_SUPABASE_ANON_KEY.substring(0, 20)}...` : 'NOT SET')
  
  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã
  if (!supabaseUrl || supabaseUrl === 'https://your-project.supabase.co') {
    console.error('‚ùå SUPABASE URL –ù–ï –ù–ê–°–¢–†–û–ï–ù!')
    return { success: false, error: 'Supabase URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' }
  }
  
  if (!supabaseKey || supabaseKey === 'your-anon-key') {
    console.error('‚ùå SUPABASE KEY –ù–ï –ù–ê–°–¢–†–û–ï–ù!')
    return { success: false, error: 'Supabase Key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' }
  }
  
  // 4. –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
  console.log('üîß –°–û–ó–î–ê–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê SUPABASE...')
  let supabase
  try {
    supabase = createClient(supabaseUrl, supabaseKey)
    console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç Supabase —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ')
  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ö–õ–ò–ï–ù–¢–ê:', error)
    return { success: false, error: `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: ${error.message}` }
  }
  
  // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  console.log('üîå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø...')
  try {
    const { data, error } = await supabase
      .from('users')
      .select('count')
      .limit(1)
    
    if (error) {
      console.error('‚ùå –û–®–ò–ë–ö–ê –ó–ê–ü–†–û–°–ê –ö –ë–î:', error)
      console.error('–ö–æ–¥ –æ—à–∏–±–∫–∏:', error.code)
      console.error('–°–æ–æ–±—â–µ–Ω–∏–µ:', error.message)
      console.error('–î–µ—Ç–∞–ª–∏:', error.details)
      console.error('–ü–æ–¥—Å–∫–∞–∑–∫–∞:', error.hint)
      return { success: false, error: `–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}` }
    }
    
    console.log('‚úÖ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ë–î –£–°–ü–ï–®–ù–û!')
    console.log('–î–∞–Ω–Ω—ã–µ:', data)
    return { success: true, data }
    
  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø:', error)
    return { success: false, error: `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}` }
  }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
if (typeof window !== 'undefined') {
  debugSupabaseConnection()
}
